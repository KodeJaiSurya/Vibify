name: CI

on:
  # Triggers the workflow on push or pull request events for the main and specific branches
  push:
    branches:
      - main
      - kirti
      - jai
      - anji
    paths:
      - '**'  # triggers build steps for any change
      # - 'pipelines/**'  # triggers model training and validation whenever new code is pushed that affects the model
  pull_request:
    branches:
      - main
    paths:
      - '**'  # triggers build steps for any change
      # - 'pipelines/**'  # triggers model training and validation whenever new code is pushed that affects the model

jobs:
  # Build and Test job
  build:
    runs-on: ubuntu-latest # Uses the latest version of Ubuntu

    steps:
      - name: Check out code
        uses: actions/checkout@v3 # Checks out the repository code

      - name: Set up Python
        uses: actions/setup-python@v4 # Sets up Python in the environment
        with:
          python-version: "==3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  
          pip install -r requirements.txt
          pip install dvc[gs]

      - name: Run tests
        run: |
          python -m unittest discover -s tests  # Runs unittests in the tests directory

      - name: Setup GCP Authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_KEY }}

      - name: Setup DVC
        run: |
          dvc init -f
          dvc remote add -d myremote gs://data_fer2013

      - name: Download data
        run: |
          python pipelines/dags/src/emotion_data_downloader.py
          python pipelines/dags/src/song_data_pipeline.py

      - name: Check Data Anomaly
        run: |
          python pipelines/dags/src/anomaly.py

      - name: Run emotion data pipeline
        run: |
          export PYTHONPATH=$(pwd)/pipelines/dags/src:$PYTHONPATH  # Adding the src directory to PYTHONPATH
          python -m pipelines.dags.src.emotion_data_pipeline  

      # Train model
      - name: Run model training script
        id: model_training
        run: |
          export PYTHONPATH=$(pwd)/pipelines/dags/src:$PYTHONPATH  # Adding the src directory to PYTHONPATH
          python pipelines/dags/src/emotion_model_pipeline.py 

      # Slack notification for model training success
      - name: Send Slack notification (model training success)
        if: steps.model_training.outcome == 'success'
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Model training completed successfully!"}' ${{ secrets.SLACK_WEBHOOK_URL }}

      # Slack notification for model training failure
      - name: Send Slack notification (model training failure)
        if: steps.model_training.outcome == 'failure'
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Model training failed!"}' ${{ secrets.SLACK_WEBHOOK_URL }}

      # Running model validation
      - name: Run model validation
        run: |
          export PYTHONPATH=$(pwd)/pipelines/dags/src:$PYTHONPATH
          VALIDATION_RESULT=$(python pipelines/dags/src/validation/modelValidation.py)
          if [ "$VALIDATION_RESULT" -eq 0 ]; then
            echo "Validation failed. Exiting..."
            exit 1
          else
            echo "Validation passed."
          fi
      
      # Slack notifications for pipeline success or failure
      - name: Send Slack notification (build success)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Build succeeded!"}' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack notification (build failure)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Build failed!"}' ${{ secrets.SLACK_WEBHOOK_URL }}

  # # Model Training and Validation Job seperate job
  # model_training:
  #   runs-on: ubuntu-latest
  #   needs: build  # Ensures that build job completes successfully first

  #   # This job will run only if there are changes to the `pipelines/` folder
  #   if: |
  #     github.event_name == 'push' && contains(join(github.event.head_commit.modified), 'pipelines/') || 
  #     github.event_name == 'pull_request' && contains(join(github.event.pull_request.head.repo.modified_files), 'pipelines/')
    
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.11"

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip  
  #         pip install -r requirements.txt
  #         pip install dvc[gs]

  #     - name: Send Slack notification (success)
  #       if: success()
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' --data '{"text":"Model training and validation succeeded!"}' ${{ secrets.SLACK_WEBHOOK_URL }}

  #     - name: Send Slack notification (failure)
  #       if: failure()
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' --data '{"text":"Model training and validation failed!"}' ${{ secrets.SLACK_WEBHOOK_URL }}

  #     # - name: Model Training
  #     #   run: python path/to/model_training_script.py

  #     # - name: Model Validation
  #     #   run: python path/to/model_validation_script.py --threshold 
